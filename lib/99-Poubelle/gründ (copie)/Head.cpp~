#include "Head.hpp"

size_t descriptionFichier::analyseEntete(string * contenuFichier) {
  size_t pos1, pos2, posCR ;
  int i=0;
  
  nbColonnes=detectNbColonne(contenuFichier);
  if (contenuFichier->substr(0,1).compare("#") == 0) {
    posCR = contenuFichier->find("\n", 0);
    pos1=1;
    while (pos1<posCR) {
      pos2 = contenuFichier->find("|", pos1);
      if (pos2>=posCR) pos2 = posCR;

      if ( contenuFichier->substr(pos1,(pos2-pos1)).compare("STRING") == 0)  { reponseIndex.push_back(i);  cout << i << endl;}
      if ( contenuFichier->substr(pos1,(pos2-pos1)).compare("KEY") == 0) { questionIndex.push_back(i); cout << i << endl;}
      if ( contenuFichier->substr(pos1,(pos2-pos1)).compare("MEMO") == 0)     { memoIndex.push_back(i);	    cout << i << endl;}
      if ( contenuFichier->substr(pos1,(pos2-pos1)).compare("SHOT") == 0)     { shotIndex.push_back(i);     cout << i << endl;}
      pos1 = pos2+1; i++;
    }
    if (interfacetty::flagVerbose) printIndex();
  } else {
    interfacetty::erreur ("descriptionFichier", "analyseEntete", "Pas de ligne d'entÃªte");
  }
  return ++posCR;
}

int descriptionFichier::saveEntete(ostream * out) {
  *out << "#";
  for (int i=0; i<(nbColonnes-1); i++) {
    for (int j=0; j<reponseIndex.size(); j++)	 if ( i == reponseIndex[j] )  *out << "STRING"  << "\t";
    for (int j=0; j<questionIndex.size(); j++)   if ( i == questionIndex[j] ) *out << "KEY"  << "\t";
    for (int j=0; j<memoIndex.size(); j++)	 if ( i == memoIndex[j] )     *out << "MEMO"  << "\t";
    for (int j=0; j<shotIndex.size(); j++)	 if ( i == shotIndex[j] )     *out << "SHOT"  << "\t";
  }
  for (int j=0; j<reponseIndex.size(); j++)	 if ((nbColonnes-1) == reponseIndex[j] )  *out << "STRING";
    for (int j=0; j<questionIndex.size(); j++)   if ((nbColonnes-1) == questionIndex[j] ) *out << "KEY";
    for (int j=0; j<memoIndex.size(); j++)	 if ((nbColonnes-1) == memoIndex[j] )     *out << "MEMO";
    for (int j=0; j<shotIndex.size(); j++)	 if ((nbColonnes-1) == shotIndex[j] )     *out << "SHOT";
  *out << "\n";
}

int descriptionFichier::printIndex() {
  interfacetty::message("descriptionFichier", "printIndex", "reponseIndex");
  for (int i=0; i<reponseIndex.size(); i++)  interfacetty::message("descriptionFichier","printIndex",to_string(reponseIndex[i])   );
  interfacetty::message("descriptionFichier", "printIndex", "questionIndex");
  for (int i=0; i<questionIndex.size(); i++) interfacetty::message("descriptionFichier","printIndex", to_string(questionIndex[i]) );
  interfacetty::message("descriptionFichier", "printIndex", "memoIndex");
  for (int i=0; i<memoIndex.size(); i++)     interfacetty::message("descriptionFichier","printIndex", to_string(memoIndex[i])     );
  interfacetty::message("descriptionFichier", "printIndex", "shotIndex");
  for (int i=0; i<shotIndex.size(); i++)     interfacetty::message("descriptionFichier","printIndex", to_string(shotIndex[i])     );
}

