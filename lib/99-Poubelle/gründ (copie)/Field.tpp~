

template <typename T>
Field<T>::Field(){
  col="#";

    //#ADEPLACER//
  level=0;
  time=monTemps();
    //#ADEPLACER//
}

/* 
  trois issue:
  fin là où l'on attendait        true
  fin là où l'on l'attendait pas  false
  fin à la fin                    false
  on continue                     2
*/

template <typename T>
int Field<T>::store(string contenuFichier,
		 size_t *pos1, size_t *pos2,
		 int flagSuperStatic){
  //######## col
  *pos2 = contenuFichier.find("|", *pos1);
  if (*pos2==contenuFichier.npos) return true;
  col = contenuFichier.substr(*pos1, (*pos2-*pos1));
  *pos1 = *pos2+1;

//  //--------time
//  if(flagSuperStatic) {
//    *pos2 = contenuFichier.find("|", *pos1);
//    if (*pos2==contenuFichier.npos) return false;
//    level = stoi(contenuFichier.substr(*pos1, (*pos2-*pos1)));
//    *pos1 = *pos2+1;
//    
//    *pos2 = contenuFichier.find("|", *pos1);
//    if (*pos2==contenuFichier.npos) return false;
//    time = stoi(contenuFichier.substr(*pos1, (*pos2-*pos1)));
//    *pos1 = *pos2+1;    
//  }
  return 2;
}

template <typename T>
int Field<T>::reset() {
  level=0;
}

template <typename T>
int Field<T>::print() {
  saveHumain(&cout);
}

template <typename T>
int Field<T>::saveHumain(ostream * out) {
  *out << col   << "|";
//      //#ADEPLACER//
//       << level << "|"
//       << time  << "|";
//    //#ADEPLACER//
}

template <typename T>
int Field<T>::saveShort(ostream * out) {
  *out << col   << "\t";
}










//#ADEPLACER//
template <typename T>
int Field<T>::fautIlRedemander() {
  if (level == false) return true;
  
  long deltaTemps = monTemps()-time;
  return (deltaTemps/level) > 86400 ? true:false;
}

template <typename T>
int Field<T>::reussite() {
  time = monTemps();
  level++;
}

template <typename T>
int Field<T>::echec() {
  time = monTemps();
  if (level>0) level--;
}
//#ADEPLACER//
