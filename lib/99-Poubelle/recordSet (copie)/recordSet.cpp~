int Vokabel::swap(int index1, int index2) {
  string TempRecord;
  for (int i=0; i<20; i++) {
    TempRecord = recordSet[index1].vectorField[i].col;
    recordSet[index1].vectorField[i].col = recordSet[index2].vectorField[i].col;
    recordSet[index2].vectorField[i].col = TempRecord;
  }
}

int Vokabel::sort(int critere) {
  int k=0;
  for (int i=k++; i < recordSet.size(); i++){
    for (int j=i+1; j < recordSet.size(); j++) {
      if (recordSet[i].vectorField[critere].col.compare (recordSet[j].vectorField[critere].col) > 0)
	swap(i,j);
    }
  }
}

//== RECHERCHE =======================================================================================

int Vokabel::searchGen(vector<Record> & monRecordSet, int critere, int critere2, string motif) {
  cout << endl;
  for (int i=0; i< monRecordSet.size(); i++){
    string montexte = monRecordSet[i].vectorField[critere].col.substr(0,motif.size());
    boost::to_upper(montexte);
    string monMotif = motif;
    boost::to_upper(monMotif);
    if (montexte.compare(monMotif)==0) {
      //          if (monRecordSet[i].vectorField[critere].col.substr(0,motif.size()).compare(motif)==0) {
      cout << i << " : " << monRecordSet[i].vectorField[critere].col;
      if (critere2!=-1)
	cout << "\t\t" << monRecordSet[i].vectorField[critere2].col;
      cout << endl;
    }
  }
}

int Vokabel::search(int critere, int critere2, string motif) {
  searchGen(recordSet, critere, critere2, motif);
}
