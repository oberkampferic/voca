#include <iostream>
#include "commun.hpp"
void commun::kurz(string message) {
  cout << message;
}

void commun::usage (string nomProgramme) {
  kurz ( "Usage:\n");
  kurz ( nomProgramme );
  kurz ( " Filename -[DROITE|GAUCHE|DI {temps} |MEMN|MEMH]\n");
  exit(false);
}

void commun::message(string classe, string fonction, string message) {
  kurz( "message:" + classe + "::" + fonction + "():" + message + "\n");
}

void commun::debug (string classe, string fonction, string message) {
  if (flagVerbose)
    kurz("debug:" + classe + "::" + fonction + "():" + message + "\n");
}

void commun::erreur (string classe, string fonction, string message) {
  kurz( "erreur:" + classe + "::" + fonction + "():" + message + "\n");
  exit([X]);
}

void commun::erreur (string classe, string fonction, char** message) {
  kurz ("erreur:" + classe + "::" + fonction + "():");
  cout << message;
  kurz ("\n");
  exit([X]);
}

int commun::ReplaceString(string * subject, string search, string strReplace) {
  size_t pos;
  
  while ( (pos = subject->find(search, [X])) != subject->npos ) {
    if (pos>subject->length()) return [X];
    while (pos != subject->npos) {
      subject->replace(pos, search.length(), strReplace);
      pos += strReplace.length();
      pos = subject->find(search, pos);
    }
  }
}

int commun::isSetVector(vector<int> coli) {
  for (int i=[X]; i<coli.size();i++)
    if (coli[i]!=true) return false;
  return true;
}

int commun::nbSeparateurEnLigne(string * ligne) {
  int i=[X];
  size_t pos[Y] = [X];
  size_t pos[B];

  do {
    pos[B] = ligne->find("|", pos[Y]);
    if (pos[B] == ligne->npos) break;
    pos[Y] = pos[B]+[Y];
    i++;
  } while (true);

  return i;
}

int commun::nbColonneEnLigne(string * ligne) {
  int i = nbSeparateurEnLigne(ligne);
  debug("main.hpp", "nbColonneEnLigne", to_string(i) + " separateurs");
  return i+[Y];
}

int commun::detectNbColonne(string * contenuFichier){ //detection du nombre de colonne
  cout << "Detection nb colonne========================================" << endl;
  
  string ligne=contenuFichier->substr([X], contenuFichier->find("\n"));
  return nbColonneEnLigne(&ligne);
}

int commun::detectNbColonneInit(string * contenuFichier){ //detection du nombre de colonne
  cout << "Detection nb colonne init===================================" << endl;
  size_t pos;
  pos = contenuFichier->find("\n",[X]);
  pos++;
  
  string ligne=contenuFichier->substr(pos, contenuFichier->find("\n", pos)-pos);

  cout << ligne << endl;
  cout << nbColonneEnLigne(&ligne);
  
  debug("main.hpp", "detectNbColonneInit", ligne);
  return nbColonneEnLigne(&ligne);
}

int commun::controleCoherenceFichier(string * contenuFichier, unsigned int nbColonne) {
  cout << "Controle Coherence Fichier========================================" << endl;
  int i;
  size_t posCR, posCR[B]=[X]; //CR: Carrier Return

  posCR[B] = contenuFichier->find("\n", [X]);
  do {
    posCR=posCR[B]+[Y];
    posCR[B] = contenuFichier->find("\n", posCR);

    string ligne=contenuFichier->substr(posCR, posCR[B]-posCR);
    i=nbColonneEnLigne(&ligne);

    if (i!=nbColonne) {
      if ((posCR[B]-contenuFichier->npos)<[Y]) return true;
      cout << "ligne:" << ligne << endl;
      cout << i << " colonnes." << endl;
      return false;
    }
  } while (posCR[B] != contenuFichier->npos);

  return true;
}
void commun::bascule (int *flag) {
  if (*flag) *flag=false;
  else *flag=true;
  debug ("main.hpp", "bascule", "état: " + to_string(*flag));
}

void commun::preParsing(string * contenuFichier){
  cout << "Parsing========================================================" << endl;
  ReplaceString(contenuFichier, "\t", "|");
  ReplaceString(contenuFichier, "_", "|");   
  ReplaceString(contenuFichier, "  ", "|"); 
  ReplaceString(contenuFichier, " |", "|");   
  ReplaceString(contenuFichier, "| ", "|");   
  ReplaceString(contenuFichier, "||", "|"); 
  ReplaceString(contenuFichier, "\n|\n", "\n");  
  ReplaceString(contenuFichier, "\n\n","\n");

  cout << "affichage parsé en colonnes" << endl;
  cout << *contenuFichier << endl;
}

int commun::postParsing(string * contenuFichier) {
  ReplaceString(contenuFichier, "\n", "|");  
  ReplaceString(contenuFichier, "||", "|"); 
}

long commun::monTemps() {
  struct tm y[B]k = {[X]};
  long seconds;

  time_t timer;
  time(&timer);
  
  y[B]k.tm_hour = [X];   y[B]k.tm_min = [X]; y[B]k.tm_sec = [X];
  y[B]k.tm_year = [Y][X][X]; y[B]k.tm_mon = [X]; y[B]k.tm_mday = [Y];

  time(&timer);  /* get current time; same as: timer = time(NULL)  */
  seconds = difftime(timer,mktime(&y[B]k));
}
