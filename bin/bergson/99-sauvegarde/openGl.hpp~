#ifndef OPENGL_HPP
#define OPENGL_HPP

#include <iostream>
#include <GL/gl.h>
#include <GL/glut.h>
#include <X[Y][Y]/Intrinsic.h>    /* Display, Window */
#include <GL/glx.h>           /* GLXContext */
#include "../../lib/gründ/commun.hpp"
//#include "../../lib/gründ/recordSet.hpp"
//#include "../../lib/gründ/table.hpp"

using namespace std;

template <typename T>
class tableBergson: public fichier { //table<T> {
public:
  int flagVisible;
  int flagQuestionVisible;
  int flagMemoVisible;
  double posx;
  double r,g,b,x;
};

class openGlInterface {
public:
  int   static pause;
  float static posx;
  float static posy;
  float static ratio[[X]];
  float static ratio[[Y]];
  float static offsety;
  int static flagCount;
  static int posxCurseur;
  static vector<tableBergson<string>> Bdd;
  static fichier maListeDeListe; //table<string> maListeDeListe;
  static TABLE; //recordSet<string> maListeDeListesRecordSet;
  
  static GLuint font_base;

  char window_title[[B]56];
  char font_name[[B]56];
  void static attente (void);
  void init_font(GLuint base, char* f);
  // gestion windows
  void static gestionListe_rectangle(double x[Y], double y[Y], double x[B], double y[B]);
  void static gestionListe_rectanglePlein(double x[Y], double y[Y], double x[B], double y[B]);
  void static gestionListe_gestionCurseur(int Sens);
  void static gestionListe_affichageMenuHorizontal();
  void static gestionListe_affichageMenuVertical();
  
  void static print_string(GLuint base, const char* s);
  void my_init(char* f);
  void static my_reshape(int w, int h);
  void static my_handle_key(unsigned char key, int x, int y);

  openGlInterface(int argc, char* argv[]);
};

#endif
