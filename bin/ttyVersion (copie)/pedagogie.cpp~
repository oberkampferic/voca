#include "pedagogie.hpp"

pedagogie::pedagogie(int argc, char *argv[]): Vokabel(argc, argv) {
  kurz("Initialisation=================================================\n");

  string current_exec_name = argv[0];
  string first_arge;
  string second_arge;
  vector<string> all_args;

  if (argc == 1) {
    cout << "MENU GÉNÉRAL: OPTIONS DISPONIBLES" << endl;
    cout << "0: Vocabulaire général" << endl;
    cout << "A: Grammaire Conjugaison Vocabulaire" << endl;
    cout << "B: Theme" << endl;
    cout << "C: Version" << endl;
    cout << "D: Civilisation" << endl;
    cout << "E: Littérature allemande après 45" << endl;
    cout << "W: Alf" << endl;
    cout << "X: Textes et images" << endl;
    cout << "Y: Littérature XVIII-XIX" << endl;
    cout << "Z: Grand repères" << endl;
    
    Hauptantwort = getchar();

    switch( Hauptantwort) {
    case '0'://###########################################################
      cout << "Vocabulaires: tout" << endl;
      pedagogieLoadFile("../../0-Bdd/0-Général/adverbesEtConjonctionInterro",            &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/AssimilAppris",                           &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/Assimil",                                 &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/VerbeFortsCat2",                          &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/aApprendreGenre",                         &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/ilResteAApprendre3",                      &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/ilResteAApprendre4",                      &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/ilResteAApprendre5",                      &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/0-Général/mythosOpfer",                             &monTriptyshRecordSet);
      pedagogieLoadFile("../../0-Bdd/E/DeutschLitteratur",                               &monTriptyshRecordSet);
      pedagogieLoadFile("../../../Nanterre/S1/LittératureSuisse/LitteratureVocaAuteurs", &monTriptyshRecordSet);
      monTriptyshRecordSet.stringR.sort(0);

      //----------------------------------------
      pedagogieLoadFile("../../0-Bdd/0-Général/Aintégrer/häufigstenWorte",               &monTriptyshRecordSetHauftig);
      pedagogieLoadFile("../../0-Bdd/0-Général/Aintégrer/Dico",                          &monTriptyshRecordSetDico);

      //----------------------------------------
      fileName.assign("../../0-Bdd/0-Général/0-Tout"); // pour la sauvegarde
      return;	break;
      
    case 'A'://###########################################################
      cout << "a: Verbes Forts: connaissance des verbes: partie a" << endl;
      cout << "b: Verbes Forts: connaissance des verbes: partie b" << endl;
      cout << "c: Verbes Forts: connaissance des verbes: partie c" << endl;
      cout << "d: Verbes Forts: Tout à la fois" << endl;
      cout << "e: Verbes Forts: connaissance des flexions: partie a" << endl;
      cout << "f: Verbes Forts: connaissance des flexions: partie b" << endl;
      cout << "g: conjugaison test général" << endl << endl;
    
      Hauptantwort = getchar();
      Hauptantwort = getchar();
    
      switch( Hauptantwort) {
      case 'a': fileName.assign("../../0-Bdd/A/VerbesFortsParta");     break;
      case 'b': fileName.assign("../../0-Bdd/A/VerbesFortsPartb"); 	 break;
      case 'c': fileName.assign("../../0-Bdd/A/VerbesFortsPartc"); 	 break;
      case 'd':
	pedagogieLoadFile("../../0-Bdd/A/VerbesFortsParta", &monTriptyshRecordSet);
	pedagogieLoadFile("../../0-Bdd/A/VerbesFortsPartb", &monTriptyshRecordSet);
	pedagogieLoadFile("../../0-Bdd/A/VerbesFortsPartc", &monTriptyshRecordSet);
	fileName.assign      ("../../0-Bdd/A/VerbesFortsPartd"); // pour la sauvegarde
	return;	break;
      case 'e': fileName.assign("");				 break;
      case 'f': fileName.assign("");				 break;
      case 'g': fileName.assign("");				 break;
      default:   erreur ("pedagogie", "pedagogie", "mauvaise saisie"); break;
      } break;
    case 'E'://###########################################################
      fileName.assign("../../0-Bdd/E/DeutschLitteratur");
      pedagogieLoadFile(fileName, &monTriptyshRecordSet);
      return; break;
    case 'W'://###########################################################
      fileName.assign("../../0-Bdd/W/Alf");
      pedagogieLoadFile(fileName, &monTriptyshRecordSet);
      return; break;
      
    default: erreur ("pedagogie", "pedagogie", "mauvaise saisie"); break;
    }
  }

  else if (argc > 1) {
    first_arge = argv[1];
    fileName = argv[1];
    all_args.assign(argv+1, argv + argc);

    if (argc > 2) 
      for (int i=2; i<argc; i++) {
	second_arge = argv[i];
	debug ("pedagogie", "pedagogie", "second_arge: " + second_arge);
	//----------------------------------------
	if (second_arge.compare(0, 2, "DI")==0){
	  if ((i+2) > argc) 
	    erreur("pedagogie", "pedagogie", "Nombres d'arguments insuffisant ");
	  istringstream ss(argv[i+1]);
	  if (!(ss >> monTriptyshRecordSet.stringR.flagCount)) {
	    debug("pedagogie", "pedagogie", "Invalid number ");
	    erreur("pedagogie", "pedagogie", argv[1]);
	  }
	}
	//----------------------------------------
	if (second_arge.compare(0, 4, "MEMN")==0) bascule(&flagMemo);
	if (second_arge.compare(0, 4, "MEMH")==0) bascule(&flagMemo);
      }
    debug("pedagogie", "pedagogie", all_args[0]);
  }


  cout << fileName << endl;
    

  string nomFichier(fileName);
  if (nomFichier.substr(nomFichier.length()-4,nomFichier.length()).compare(0,4,"save") == 0) flagSuperStatic=true;

  pedagogieLoadFile(fileName, &monTriptyshRecordSet);
  monTriptyshRecordSet.stringR.sort(0);

  if(flagVerbose) monTriptyshRecordSet.stringR.print();

}

int pedagogie::Hauptmenu(){
  interrogation();
}

pedagogie::~pedagogie(){
}
